from flask import Flask, render_template, jsonify
from dotenv import load_dotenv
import os
from spotipy.oauth2 import SpotifyOAuth
import spotipy

load_dotenv()

os.environ['CLIENT_ID'] = " <your client id>"
os.environ['CLIENT_SECRET'] = "<your client secret>"

clid = os.getenv("CLIENT_ID")
clscrt = os.getenv("CLIENT_SECRET")

app = Flask(__name__)

def get_user_top_tracks(token):
    sp = spotipy.Spotify(auth=token)
    top_tracks = sp.current_user_top_tracks(limit=10, time_range='medium_term')  # 'short_term', 'medium_term', 'long_term'
    return top_tracks

def get_top_tracks_formatted(token):
    top_tracks = get_user_top_tracks(token)
    formatted_tracks = []
    for track in top_tracks['items']:
        formatted_tracks.append({
            'name': track['name'],
            'artists': [artist['name'] for artist in track['artists']],
            'album': track['album']['name'],
            'album_image_url': track['album']['images'][0]['url'] if track['album']['images'] else None
        })
    return formatted_tracks

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/get_top_tracks')
def api_get_top_tracks():
    SPOTIPY_REDIRECT_URI = 'http://localhost:8080/callback'
    auth_manager = SpotifyOAuth(client_id=clid, client_secret=clscrt, redirect_uri=SPOTIPY_REDIRECT_URI, scope="user-top-read")
    token_info = auth_manager.get_cached_token()

    if not token_info:
        return 'Authentication required'

    access_token = token_info['access_token']
    top_tracks = get_top_tracks_formatted(access_token)
    return jsonify(top_tracks)

    
if __name__ == "__main__":
    app.run()
